// Generated by jextract

package com.example.generated;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.MemoryLayout.PathElement.sequenceElement;
import static java.lang.foreign.ValueLayout.OfInt;

/**
 * {@snippet lang = c:
 * struct ObpfTetromino {
 *     ObpfVec2 mino_positions[4];
 *     ObpfTetrominoType type;
 * }
 *}
 */
@SuppressWarnings("all")
public class ObpfTetromino {

    ObpfTetromino() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4, ObpfVec2.layout()).withName("mino_positions"),
            ObpfNativeInterface.C_INT.withName("type")
    ).withName("ObpfTetromino");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout mino_positions$LAYOUT = (SequenceLayout) $LAYOUT.select(groupElement("mino_positions"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * ObpfVec2 mino_positions[4]
     *}
     */
    public static final SequenceLayout mino_positions$layout() {
        return mino_positions$LAYOUT;
    }

    private static final long mino_positions$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * ObpfVec2 mino_positions[4]
     *}
     */
    public static final long mino_positions$offset() {
        return mino_positions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * ObpfVec2 mino_positions[4]
     *}
     */
    public static MemorySegment mino_positions(MemorySegment struct) {
        return struct.asSlice(mino_positions$OFFSET, mino_positions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * ObpfVec2 mino_positions[4]
     *}
     */
    public static void mino_positions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, mino_positions$OFFSET, mino_positions$LAYOUT.byteSize());
    }

    private static long[] mino_positions$DIMS = {4};

    /**
     * Dimensions for array field:
     * {@snippet lang = c:
     * ObpfVec2 mino_positions[4]
     *}
     */
    public static long[] mino_positions$dimensions() {
        return mino_positions$DIMS;
    }

    private static final MethodHandle mino_positions$ELEM_HANDLE = mino_positions$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang = c:
     * ObpfVec2 mino_positions[4]
     *}
     */
    public static MemorySegment mino_positions(MemorySegment struct, long index0) {
        try {
            return (MemorySegment) mino_positions$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang = c:
     * ObpfVec2 mino_positions[4]
     *}
     */
    public static void mino_positions(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, mino_positions(struct, index0), 0L, ObpfVec2.layout().byteSize());
    }

    private static final OfInt type$LAYOUT = (OfInt) $LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * ObpfTetrominoType type
     *}
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * ObpfTetrominoType type
     *}
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * ObpfTetrominoType type
     *}
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * ObpfTetrominoType type
     *}
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() {
        return layout().byteSize();
    }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

