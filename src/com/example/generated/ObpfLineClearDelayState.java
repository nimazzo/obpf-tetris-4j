// Generated by jextract

package com.example.generated;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfByte;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang = c:
 * struct {
 *     uint8_t count;
 *     uint8_t first;
 *     uint8_t second;
 *     uint8_t third;
 *     uint8_t fourth;
 *     uint64_t countdown;
 *     uint64_t delay;
 * }
 *}
 */
@SuppressWarnings("all")
public class ObpfLineClearDelayState {

    ObpfLineClearDelayState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            ObpfNativeInterface.C_CHAR.withName("count"),
            ObpfNativeInterface.C_CHAR.withName("first"),
            ObpfNativeInterface.C_CHAR.withName("second"),
            ObpfNativeInterface.C_CHAR.withName("third"),
            ObpfNativeInterface.C_CHAR.withName("fourth"),
            MemoryLayout.paddingLayout(3),
            ObpfNativeInterface.C_LONG_LONG.withName("countdown"),
            ObpfNativeInterface.C_LONG_LONG.withName("delay")
    ).withName("$anon$17:13");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte count$LAYOUT = (OfByte) $LAYOUT.select(groupElement("count"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * uint8_t count
     *}
     */
    public static final OfByte count$layout() {
        return count$LAYOUT;
    }

    private static final long count$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * uint8_t count
     *}
     */
    public static final long count$offset() {
        return count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * uint8_t count
     *}
     */
    public static byte count(MemorySegment struct) {
        return struct.get(count$LAYOUT, count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * uint8_t count
     *}
     */
    public static void count(MemorySegment struct, byte fieldValue) {
        struct.set(count$LAYOUT, count$OFFSET, fieldValue);
    }

    private static final OfByte first$LAYOUT = (OfByte) $LAYOUT.select(groupElement("first"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * uint8_t first
     *}
     */
    public static final OfByte first$layout() {
        return first$LAYOUT;
    }

    private static final long first$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * uint8_t first
     *}
     */
    public static final long first$offset() {
        return first$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * uint8_t first
     *}
     */
    public static byte first(MemorySegment struct) {
        return struct.get(first$LAYOUT, first$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * uint8_t first
     *}
     */
    public static void first(MemorySegment struct, byte fieldValue) {
        struct.set(first$LAYOUT, first$OFFSET, fieldValue);
    }

    private static final OfByte second$LAYOUT = (OfByte) $LAYOUT.select(groupElement("second"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * uint8_t second
     *}
     */
    public static final OfByte second$layout() {
        return second$LAYOUT;
    }

    private static final long second$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * uint8_t second
     *}
     */
    public static final long second$offset() {
        return second$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * uint8_t second
     *}
     */
    public static byte second(MemorySegment struct) {
        return struct.get(second$LAYOUT, second$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * uint8_t second
     *}
     */
    public static void second(MemorySegment struct, byte fieldValue) {
        struct.set(second$LAYOUT, second$OFFSET, fieldValue);
    }

    private static final OfByte third$LAYOUT = (OfByte) $LAYOUT.select(groupElement("third"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * uint8_t third
     *}
     */
    public static final OfByte third$layout() {
        return third$LAYOUT;
    }

    private static final long third$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * uint8_t third
     *}
     */
    public static final long third$offset() {
        return third$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * uint8_t third
     *}
     */
    public static byte third(MemorySegment struct) {
        return struct.get(third$LAYOUT, third$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * uint8_t third
     *}
     */
    public static void third(MemorySegment struct, byte fieldValue) {
        struct.set(third$LAYOUT, third$OFFSET, fieldValue);
    }

    private static final OfByte fourth$LAYOUT = (OfByte) $LAYOUT.select(groupElement("fourth"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * uint8_t fourth
     *}
     */
    public static final OfByte fourth$layout() {
        return fourth$LAYOUT;
    }

    private static final long fourth$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * uint8_t fourth
     *}
     */
    public static final long fourth$offset() {
        return fourth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * uint8_t fourth
     *}
     */
    public static byte fourth(MemorySegment struct) {
        return struct.get(fourth$LAYOUT, fourth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * uint8_t fourth
     *}
     */
    public static void fourth(MemorySegment struct, byte fieldValue) {
        struct.set(fourth$LAYOUT, fourth$OFFSET, fieldValue);
    }

    private static final OfLong countdown$LAYOUT = (OfLong) $LAYOUT.select(groupElement("countdown"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * uint64_t countdown
     *}
     */
    public static final OfLong countdown$layout() {
        return countdown$LAYOUT;
    }

    private static final long countdown$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * uint64_t countdown
     *}
     */
    public static final long countdown$offset() {
        return countdown$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * uint64_t countdown
     *}
     */
    public static long countdown(MemorySegment struct) {
        return struct.get(countdown$LAYOUT, countdown$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * uint64_t countdown
     *}
     */
    public static void countdown(MemorySegment struct, long fieldValue) {
        struct.set(countdown$LAYOUT, countdown$OFFSET, fieldValue);
    }

    private static final OfLong delay$LAYOUT = (OfLong) $LAYOUT.select(groupElement("delay"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * uint64_t delay
     *}
     */
    public static final OfLong delay$layout() {
        return delay$LAYOUT;
    }

    private static final long delay$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * uint64_t delay
     *}
     */
    public static final long delay$offset() {
        return delay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * uint64_t delay
     *}
     */
    public static long delay(MemorySegment struct) {
        return struct.get(delay$LAYOUT, delay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * uint64_t delay
     *}
     */
    public static void delay(MemorySegment struct, long fieldValue) {
        struct.set(delay$LAYOUT, delay$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() {
        return layout().byteSize();
    }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

