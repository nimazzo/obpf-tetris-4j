// Generated by jextract

package com.example.generated;

import java.lang.foreign.*;
import java.util.function.Consumer;

import static java.lang.foreign.MemoryLayout.PathElement.groupElement;
import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang = c:
 * struct ObpfEvent {
 *     enum ObpfKey key;
 *     enum ObpfEventType type;
 *     uint64_t frame;
 * }
 *}
 */
@SuppressWarnings("all")
public class ObpfEvent {

    ObpfEvent() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            ObpfNativeInterface.C_INT.withName("key"),
            ObpfNativeInterface.C_INT.withName("type"),
            ObpfNativeInterface.C_LONG_LONG.withName("frame")
    ).withName("ObpfEvent");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt key$LAYOUT = (OfInt) $LAYOUT.select(groupElement("key"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * enum ObpfKey key
     *}
     */
    public static final OfInt key$layout() {
        return key$LAYOUT;
    }

    private static final long key$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * enum ObpfKey key
     *}
     */
    public static final long key$offset() {
        return key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * enum ObpfKey key
     *}
     */
    public static int key(MemorySegment struct) {
        return struct.get(key$LAYOUT, key$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * enum ObpfKey key
     *}
     */
    public static void key(MemorySegment struct, int fieldValue) {
        struct.set(key$LAYOUT, key$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt) $LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * enum ObpfEventType type
     *}
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * enum ObpfEventType type
     *}
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * enum ObpfEventType type
     *}
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * enum ObpfEventType type
     *}
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfLong frame$LAYOUT = (OfLong) $LAYOUT.select(groupElement("frame"));

    /**
     * Layout for field:
     * {@snippet lang = c:
     * uint64_t frame
     *}
     */
    public static final OfLong frame$layout() {
        return frame$LAYOUT;
    }

    private static final long frame$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang = c:
     * uint64_t frame
     *}
     */
    public static final long frame$offset() {
        return frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang = c:
     * uint64_t frame
     *}
     */
    public static long frame(MemorySegment struct) {
        return struct.get(frame$LAYOUT, frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang = c:
     * uint64_t frame
     *}
     */
    public static void frame(MemorySegment struct, long fieldValue) {
        struct.set(frame$LAYOUT, frame$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() {
        return layout().byteSize();
    }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

