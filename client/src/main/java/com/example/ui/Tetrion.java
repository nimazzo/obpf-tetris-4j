package com.example.ui;

import com.example.autogenerated.ObpfNativeInterface;
import com.example.simulation.Mino;
import javafx.animation.AnimationTimer;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.scene.canvas.Canvas;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

public class Tetrion extends StackPane {
    private static final int Y_OFFSET = ObpfNativeInterface.obpf_tetrion_num_invisible_lines();

    public static final int ROWS = ObpfNativeInterface.OBPF_MATRIX_HEIGHT();
    public static final int COLS = ObpfNativeInterface.OBPF_MATRIX_WIDTH();

    private static final int PIXELS_PER_CELL = 30;
    private static final int PADDING = 10;

    private static final Color CLEAR_COLOR = Color.rgb(175, 175, 175);
    private static final List<Color> COLORS = List.of(
            Color.rgb(0, 0, 0),
            Color.rgb(0, 240, 240),
            Color.rgb(0, 0, 240),
            Color.rgb(240, 160, 0),
            Color.rgb(240, 240, 0),
            Color.rgb(0, 240, 0),
            Color.rgb(160, 0, 240),
            Color.rgb(240, 0, 0)
    );
    private static final List<Color> GHOST_COLORS = List.of(
            Color.rgb(0, 0, 0),
            Color.rgb(0, 120, 120),
            Color.rgb(0, 0, 120),
            Color.rgb(120, 70, 0),
            Color.rgb(120, 120, 0),
            Color.rgb(0, 120, 0),
            Color.rgb(90, 0, 120),
            Color.rgb(120, 0, 0)
    );

    private final Canvas canvas;
    private final Text fpsCounter = new Text();
    private final Text frameCounter = new Text();

    // fps calculation
    private long totalFrameTime = 0;
    private int frameTimeIndex = 0;
    private long last = System.nanoTime();

    private final List<Mino> gameBoard = new ArrayList<>(ROWS * COLS);

    public Tetrion() {
        canvas = new Canvas(COLS * PIXELS_PER_CELL + PADDING * 2, (ROWS - Y_OFFSET) * PIXELS_PER_CELL + PADDING * 2);
        var debug = new HBox(5.0, new Text("FPS:"), fpsCounter, new Text("Frame:"), frameCounter);
        var vbox = new VBox(5.0, canvas, debug);

        getChildren().add(vbox);
        setPadding(new Insets(10.0));

        new AnimationTimer() {
            @Override
            public void handle(long now) {
                redraw(now);
            }
        }.start();
    }

    public void update(Consumer<List<Mino>> updateGameBoard) {
        synchronized (gameBoard) {
            updateGameBoard.accept(gameBoard);
        }
    }

    private void redraw(long now) {
        totalFrameTime += now - last;
        frameTimeIndex++;
        last = now;

        if (totalFrameTime >= 1_000_000_000) {
            long averageFrameTime = totalFrameTime / frameTimeIndex;
            long fps = 1_000_000_000 / averageFrameTime;
            fpsCounter.setText(String.format("%d", fps));

            totalFrameTime = 0;
            frameTimeIndex = 0;
        }

        drawBackground();
        drawMinos();
        drawGrid();
    }

    private void drawBackground() {
        var gc = canvas.getGraphicsContext2D();
        gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
        gc.setFill(CLEAR_COLOR);
        gc.fillRect(0, 0, canvas.getWidth(), canvas.getHeight());
    }

    private void drawGrid() {
        var gc = canvas.getGraphicsContext2D();
        gc.setStroke(Color.BLACK);

        for (int row = 0; row <= ROWS; row++) {
            gc.strokeLine(PADDING, row * PIXELS_PER_CELL + PADDING, canvas.getWidth() - PADDING, row * PIXELS_PER_CELL + PADDING);
        }
        for (int col = 0; col <= COLS; col++) {
            gc.strokeLine(col * PIXELS_PER_CELL + PADDING, PADDING, col * PIXELS_PER_CELL + PADDING, canvas.getHeight() - PADDING);
        }
    }

    private void drawMinos() {
        synchronized (gameBoard) {
            for (var mino : gameBoard) {
                drawMino(mino.x(), mino.y() - Y_OFFSET, mino.type(), mino.ghostPiece());
            }
        }
    }

    private void drawMino(int x, int y, int type, boolean ghostPiece) {
        var gc = canvas.getGraphicsContext2D();
        gc.setFill(ghostPiece ? GHOST_COLORS.get(type) : COLORS.get(type));
        gc.fillRect(scale(x), scale(y), PIXELS_PER_CELL, PIXELS_PER_CELL);
    }

    private double scale(int value) {
        return PADDING + value * PIXELS_PER_CELL;
    }

    public void setCurrentFrame(long frame) {
        Platform.runLater(() -> frameCounter.setText("" + frame));
    }
}
